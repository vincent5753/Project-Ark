#!/bin/bash

# Define the path to your config files
CONFIG_DIR="./configs"

# --- Main Command Handler ---
main() {
    # This section is NEW. It parses for the --dry-run flag.
    DRY_RUN=0
    ARGS=()
    for arg in "$@"; do
        if [[ "$arg" == "--dry-run" ]]; then
            DRY_RUN=1
        else
            # Collect all other arguments
            ARGS+=("$arg")
        fi
    done

    # Overwrite the original arguments with the filtered list
    set -- "${ARGS[@]}"
    # End of new section

    COMMAND="$1"
    ARGUMENT="$2"

    case "$COMMAND" in
        backup)
            if [ -z "$ARGUMENT" ]; then
                execute_all_plans
            else
                execute_plan "$ARGUMENT"
            fi
            ;;
        method)
            # --dry-run doesn't apply to the 'method' command
            if [ "$DRY_RUN" -eq 1 ]; then
                echo "Warning: --dry-run is not applicable to the 'method' command."
            fi
            if [ -z "$ARGUMENT" ]; then
                list_all_methods
            else
                describe_method "$ARGUMENT"
            fi
            ;;
        *)
            echo "Usage: ark [--dry-run] backup [plan_name]"
            echo "       ark method [method_name]"
            exit 1
            ;;
    esac
}

# --- Plan & Method Execution Logic ---

# Executes a specific plan by its name
execute_plan() {
    local plan_name="$1"
    local plan_file=$(find "$CONFIG_DIR/plans" -type f -name "*.yml" -exec sh -c 'yq ".name" "$0" | grep -q "^${1}$"' {} "$plan_name" \; -print)

    if [ -z "$plan_file" ]; then
        echo "Error: Plan '$plan_name' not found."
        return 1
    fi
    
    # MODIFIED: Message now reflects the run mode
    if [ "$DRY_RUN" -eq 1 ]; then
        echo "Performing dry run for plan: $plan_name"
    else
        echo "Executing plan: $plan_name"
    fi
    
    local num_steps=$(yq '.steps | length' "$plan_file")

    for i in $(seq 0 $(($num_steps - 1))); do
        local method_name=$(yq ".steps[$i].method" "$plan_file")
        echo "--> Step $(($i + 1)): Using method '$method_name'"

        local method_file=$(find "$CONFIG_DIR/methods" -type f -name "*.yml" -exec sh -c 'yq ".name" "$0" | grep -q "^${1}$"' {} "$method_name" \; -print)
        
        if [ -z "$method_file" ]; then
            echo "    Error: Method '$method_name' not found. Aborting."
            return 1
        fi

        local command_template=$(yq -r '.command' "$method_file")
        local final_command="$command_template"

        for key in $(yq ".steps[$i].params | keys | .[]" "$plan_file"); do
            local value=$(yq ".steps[$i].params.$key" "$plan_file")
            final_command="${final_command//\{\{$key\}\}/$value}"
        done

        # MODIFIED: Core logic change for --dry-run
        # Instead of just running eval, we check the flag first.
        if [ "$DRY_RUN" -eq 1 ]; then
            echo "    [DRY RUN] $final_command"
        else
            echo "    Executing: $final_command"
            eval "$final_command"
            if [ $? -ne 0 ]; then
                echo "    Error: Step failed. Aborting plan."
                return 1
            fi
            echo "    Step complete."
        fi
    done
    
    # MODIFIED: Final message is now context-aware
    if [ "$DRY_RUN" -eq 1 ]; then
        echo "Dry run for plan '$plan_name' complete."
    else
        echo "Plan '$plan_name' finished successfully."
    fi
}

# Finds and runs all defined plans
execute_all_plans() {
    # MODIFIED: Message reflects the run mode
    if [ "$DRY_RUN" -eq 1 ]; then
        echo "Executing dry run for all backup plans..."
    else
        echo "Executing all backup plans..."
    fi

    for plan_file in $(find "$CONFIG_DIR/plans" -type f -name "*.yml"); do
        local plan_name=$(yq '.name' "$plan_file")
        execute_plan "$plan_name"
        echo # Add a newline for better separation between plans
    done
}


# --- Informational Functions (Unchanged) ---

list_all_methods() {
    echo "Available methods:"
    for method_file in $(find "$CONFIG_DIR/methods" -type f -name "*.yml"); do
        yq '.name' "$method_file"
    done
}

describe_method() {
    local method_name="$1"
    local method_file=$(find "$CONFIG_DIR/methods" -type f -name "*.yml" -exec sh -c 'yq ".name" "$0" | grep -q "^${1}$"' {} "$method_name" \; -print)

    if [ -z "$method_file" ]; then
        echo "Error: Method '$method_name' not found."
        return 1
    fi
    
    echo "Details for method: $method_name"
    yq '.' "$method_file"
}

# --- Script Entrypoint ---
main "$@"
